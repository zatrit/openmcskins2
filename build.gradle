plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/releases/' }
}

loom {
    //noinspection GroovyAssignabilityCheck
    accessWidenerPath = file("src/main/resources/openmcskins.accesswidener")
}

dependencies {
    var shadowImpl = { dep ->
        // Shadows and implements dependency (D.R.Y.)
        implementation dep
        shadow dep
    }

    var extraModApi = dep -> modApi(dep) {
        // Excludes the Fabric API as otherwise the debugger will not work
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    extraModApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
    extraModApi "com.github.Fallen-Breath:conditional-mixin:${project.conditional_mixin_version}"
    extraModApi "com.terraformersmc:modmenu:${project.modmenu_version}"

    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"

    implementation "com.moandjiezana.toml:toml4j:${project.toml4j_version}"

    shadowImpl "org.apache.commons:commons-text:${project.apache_text_version}"

    shadowImpl project(":skinlib")
}

processResources {
    inputs.property "version", project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

remapJar {
    dependsOn(shadowJar)
    //noinspection GroovyAssignabilityCheck
    inputFile.set shadowJar.archiveFile
}

shadowJar {
    minimize()

    dependencies {
        exclude dependency('org.apache.commons:commons-lang3')
        exclude 'META-INF/maven/**'
    }

    from('LICENSE.txt') {
        rename { 'META-INF/LICENSE.txt' }
    }

    configurations = [project.configurations.shadow]
    archiveBaseName.set archives_base_name
    archiveClassifier.set 'not-remapped'

    relocate 'com.moandjiezana.toml', 'me.shedaniel.cloth.clothconfig.shadowed.com.moandjiezana.toml'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    java {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_17
    }

    publishing {
        publications {
            //noinspection GroovyAssignabilityCheck
            java(MavenPublication) {
                //noinspection GroovyAssignabilityCheck
                from components.java
            }
        }
    }
}

// https://stackoverflow.com/a/52976567/12245612
static createIndex(File path) {
    def index = path.listFiles().findAll { it.isFile() }.name
    return index.join('\n')
}

def indexDir(String resourceDir, String name) {
    file("$resourceDir/$name").mkdirs()
    def presetIndexFile = file("$resourceDir/${name}.index")
    presetIndexFile.delete()

    sourceSets.main.resources.srcDirs.path.forEach {
        presetIndexFile << createIndex(file("$it/$name"))
    }
}

tasks.register('createIndex') {
    def resourceDir = "$buildDir/resources/main"

    indexDir resourceDir, 'presets'
}

processResources.dependsOn createIndex
