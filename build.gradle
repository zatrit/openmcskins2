plugins {
    id "com.modrinth.minotaur" version "2.+"
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'fabric-loom' version '1.5-SNAPSHOT'
}

version project.mod_version
group project.maven_group

var localProps = new Properties()
var localPropsFile = file("$projectDir/local.properties")
if (localPropsFile.exists()) localProps.load(localPropsFile.newInputStream())
ext.localProps = localProps

apply from: 'scripts/modrinth.gradle'
apply from: 'scripts/index.gradle'

tasks.register 'publishMod'
processResources.dependsOn createIndex
publishMod.dependsOn tasks.named('modrinth')

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/releases/' }
    maven { url 'https://maven.isxander.dev/releases' }
}

configurations.modApi {
    // Excludes the Fabric API as otherwise the debugger will not work.
    exclude group: 'net.fabricmc'
    exclude group: 'net.fabricmc.fabric-api'
}

dependencies {
    def apiModules = ['fabric-resource-loader-v0',
                      'fabric-command-api-v1',
                      'fabric-screen-api-v1',
                      'fabric-key-binding-api-v1',
                      'fabric-lifecycle-events-v1']

    implementation "org.jetbrains:annotations:${project.jb_annotations_version}"

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    apiModules.forEach {
        modImplementation(fabricApi.module(it, project.fabric_version))
    }

    // include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"

    implementation "io.hotmoka:toml4j:${project.toml4j_version}"
    shadow "net.andreinc:aleph:${project.aleph_version}"
    shadow('com.github.zatrit.openmcskins2:skinlib:main-SNAPSHOT') {
        transitive false
        changing true
    }

    // It is necessary to run the game client, because otherwise
    // all dependencies of shadow type will not be loaded.
    configurations.shadow.dependencies.forEach { implementation it }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

remapJar {
    dependsOn(shadowJar)
    inputFile = shadowJar.archiveFile
    archiveAppendix = project.minecraft_version
}

shadowJar {
    minimize()

    dependencies {
        exclude dependency('org.apache.commons:commons-lang3')
        exclude dependency('com.google.code.gson:gson')
        exclude dependency('org.jetbrains:annotations')

        exclude 'META-INF/maven/**'
        exclude 'META-INF/*.txt'
        exclude '**/package-info.*'
    }

    from('license/APACHE.txt') {
        rename { 'META-INF/LICENSE.txt' }
    }

    from('license/MIT.txt') {
        rename { 'META-INF/MIT.txt' }
    }

    from('NOTICE.txt') {
        rename { 'META-INF/NOTICE.txt' }
    }

    relocate 'com.moandjiezana.toml', 'me.shedaniel.cloth.clothconfig.shadowed.com.moandjiezana.toml'

    configurations = [project.configurations.shadow]
    archiveBaseName = archive_base_name
    archiveClassifier = 'dev'
    archiveAppendix = project.minecraft_version
}

java {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
}

loom {
    accessWidenerPath = file("src/main/resources/skins.accesswidener")
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    publishing {
        publications {
            //noinspection GroovyAssignabilityCheck
            java(MavenPublication) {
                //noinspection GroovyAssignabilityCheck
                from components.java
            }
        }
    }
}